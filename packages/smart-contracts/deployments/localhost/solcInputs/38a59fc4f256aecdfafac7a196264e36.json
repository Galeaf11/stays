{
  "language": "Solidity",
  "sources": {
    "contracts/EthRioStays.sol": {
      "content": "// SPDX-License-Identifier: GPL\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"./IEthRioStays.sol\";\nimport \"./StayEscrow.sol\";\nimport \"./libraries/StayTokenMeta.sol\";\n\n// import \"hardhat/console.sol\";\n\n\ncontract EthRioStays is IEthRioStays, StayEscrow, ERC721URIStorage {\n  using Counters for Counters.Counter;\n  Counters.Counter private _stayTokenIds;\n\n  uint32 public constant dayZero = 1645567342; // 22 Feb 2022\n  address private constant _ukraineDAO = 0x633b7218644b83D57d90e7299039ebAb19698e9C; // ukrainedao.eth https://twitter.com/Ukraine_DAO/status/1497274679823941632\n  uint8 private constant _ukraineDAOfee = 2; // percents\n\n  // Schema conformance URLs for reference\n  string public constant lodgingFacilitySchemaURI = \"\";\n  string public constant spaceSchemaURI = \"\";\n  string public constant staySchemaURI = \"\";\n\n  // Lodging Facility is any type of accommodation: hotel, hostel, apartment, etc.\n  struct LodgingFacility {\n    address owner;\n    bool active;\n    bool exists;\n    string dataURI; // must be conformant with \"lodgingFacilitySchemaURI\"\n    address fren;\n  }\n\n  // Space = Room Type\n  struct Space {\n    bytes32 lodgingFacilityId;\n    uint16 capacity; // number of rooms of this type\n    uint256 pricePerNightWei;\n    bool active;\n    bool exists;\n    string dataURI; // must be conformant with \"spaceSchemaURI\"\n  }\n\n  // Stay\n  struct Stay {\n    bytes32 spaceId;\n    uint16 startDay;\n    uint16 numberOfDays;\n    uint16 quantity;\n    bool checkIn;\n    bool checkOut;\n  }\n\n  bytes32[] private _lodgingFacilityIds;\n\n  // Facility owner => LodgingFacility[]\n  mapping (address => bytes32[]) private _facilityIdsByOwner;\n\n  // facilityId => LodgingFacility\n  mapping (bytes32 => LodgingFacility) public lodgingFacilities;\n\n  // facilityId => spaceId[]\n  mapping (bytes32 => bytes32[]) private _spaceIdsByFacilityId;\n\n  // spaceId => Space\n  mapping (bytes32 => Space) public spaces;\n\n  // spaceId => daysFromDayZero => numberOfBookings\n  mapping(bytes32 => mapping(uint16 => uint16)) private _booked;\n\n  // Stay token => Stay\n  mapping(uint256 => Stay) private _stays;\n\n  constructor() ERC721(\"EthRioStays\", \"ERS22\") {}\n\n  /**\n   * Modifiers\n   */\n  modifier onlyLodgingFacilityOwner(bytes32 _lodgingFacilityId) {\n    require(\n      _msgSender() == lodgingFacilities[_lodgingFacilityId].owner,\n      \"Only lodging facility owner is allowed\"\n    );\n    _;\n  }\n\n  modifier onlySpaceOwner(bytes32 _spaceId) {\n    require(\n      _msgSender() == lodgingFacilities[spaces[_spaceId].lodgingFacilityId].owner,\n      \"Only space owner is allowed\"\n    );\n    _;\n  }\n\n  modifier onlyTokenOwner(uint256 _tokenId) {\n    require(\n      _msgSender() == ownerOf(_tokenId),\n      \"Only stay token owner is allowed\"\n    );\n    _;\n  }\n\n  /**\n   * Lodging Facilities Getters\n   */\n  // All registered Ids\n  function getAllLodgingFacilityIds() public view override returns (bytes32[] memory) {\n    return _lodgingFacilityIds;\n  }\n\n  // All ACTIVE facilities Ids\n  function getActiveLodgingFacilityIds() public view override returns (bytes32[] memory activeLodgingFacilityIds) {\n    activeLodgingFacilityIds = new bytes32[](_getActiveLodgingFacilitiesCount());\n    uint256 index;\n\n    for (uint256 i = 0; i < _lodgingFacilityIds.length; i++) {\n      if (lodgingFacilities[_lodgingFacilityIds[i]].active) {\n        activeLodgingFacilityIds[index] = _lodgingFacilityIds[i];\n        index++;\n      }\n    }\n  }\n\n  // All spaces Ids from facility by Id\n  function getSpaceIdsByFacilityId(bytes32 _lodgingFacilityId) public view override returns (bytes32[] memory) {\n    return _spaceIdsByFacilityId[_lodgingFacilityId];\n  }\n\n  // All ACTIVE spaces Ids from facility by Id\n  function getActiveSpaceIdsByFacilityId(bytes32 _lodgingFacilityId) public view override returns (bytes32[] memory activeSpacesIds) {\n    activeSpacesIds = new bytes32[](_getActiveSpacesCount(_lodgingFacilityId));\n    bytes32[] memory facilitiesSpaces = _spaceIdsByFacilityId[_lodgingFacilityId];\n    uint256 index;\n\n    for (uint256 i = 0; i < facilitiesSpaces.length; i++) {\n      if (spaces[facilitiesSpaces[i]].active) {\n        activeSpacesIds[index] = facilitiesSpaces[i];\n        index++;\n      }\n    }\n  }\n\n  // Availability of the space\n  function getAvailability(\n    bytes32 _spaceId,\n    uint16 _startDay,\n    uint16 _numberOfDays\n  ) public view override returns (uint16[] memory) {\n    _checkBookingParams(_spaceId, _startDay, _numberOfDays);\n\n    Space memory _s = spaces[_spaceId];\n    uint16[] memory _availability = new uint16[](_numberOfDays);\n\n    for (uint16 _x = 0; _x < _numberOfDays; _x++) {\n      _availability[_x] = _s.capacity - _booked[_spaceId][_startDay+_x];\n    }\n\n    return _availability;\n  }\n\n  // Facilities by owner\n  function getLodgingFacilityIdsByOwner(address _owner) public view override returns (bytes32[] memory) {\n    return _facilityIdsByOwner[_owner];\n  }\n\n  // Facility details\n  function getLodgingFacilityById(bytes32 _lodgingFacilityId) public view override returns(\n    bool exists,\n    address owner,\n    bool active,\n    string memory dataURI\n  ) {\n    LodgingFacility storage facility = lodgingFacilities[_lodgingFacilityId];\n    exists = facility.exists;\n    owner = facility.owner;\n    active = facility.active;\n    dataURI = facility.dataURI;\n  }\n\n  // Space details\n  function getSpaceById(bytes32 _spaceId) public view override returns (\n    bool exists,\n    bytes32 lodgingFacilityId,\n    uint16 capacity,\n    uint256 pricePerNightWei,\n    bool active,\n    string memory dataURI\n  ) {\n    Space storage space = spaces[_spaceId];\n    exists = space.exists;\n    lodgingFacilityId = space.lodgingFacilityId;\n    capacity = space.capacity;\n    pricePerNightWei = space.pricePerNightWei;\n    active = space.active;\n    dataURI = space.dataURI;\n  }\n\n  /*\n   * Lodging Facilities Management\n   */\n\n  // Lodging Facility registration (with fren option)\n  function registerLodgingFacility(string calldata _dataURI, bool _active, address _fren) public override {\n    _dataUriMustBeProvided(_dataURI);\n\n    bytes32 _id = keccak256(\n      abi.encodePacked(\n        _msgSender(),\n        _dataURI\n      )\n    );\n\n    require(!lodgingFacilities[_id].exists, \"Facility already exists\");\n\n    lodgingFacilities[_id] = LodgingFacility(\n      _msgSender(),\n      _active,\n      true,\n      _dataURI,\n      _fren\n    );\n    _lodgingFacilityIds.push(_id);\n    _facilityIdsByOwner[_msgSender()].push(_id);\n\n    emit LodgingFacilityCreated(_id, _msgSender(), _dataURI);\n  }\n\n  // Lodging Facility registration (WITHOUT fren option)\n  function registerLodgingFacility(string calldata _dataURI, bool _active) public override {\n    return registerLodgingFacility(_dataURI, _active, address(0));\n  }\n\n  function updateLodgingFacility(bytes32 _lodgingFacilityId, string calldata _newDataURI) public override onlyLodgingFacilityOwner(_lodgingFacilityId) {\n    lodgingFacilities[_lodgingFacilityId].dataURI = _newDataURI;\n    emit LodgingFacilityUpdated(_lodgingFacilityId, _newDataURI);\n  }\n\n  function activateLodgingFacility(bytes32 _lodgingFacilityId) public override onlyLodgingFacilityOwner(_lodgingFacilityId) {\n    lodgingFacilities[_lodgingFacilityId].active = true;\n    emit LodgingFacilityActiveState(_lodgingFacilityId, true);\n  }\n\n  function deactivateLodgingFacility(bytes32 _lodgingFacilityId) public override onlyLodgingFacilityOwner(_lodgingFacilityId) {\n    lodgingFacilities[_lodgingFacilityId].active = false;\n    emit LodgingFacilityActiveState(_lodgingFacilityId, false);\n  }\n\n  function yieldLodgingFacility(bytes32 _lodgingFacilityId, address _newOwner) public override onlyLodgingFacilityOwner(_lodgingFacilityId) {\n    emit LodgingFacilityOwnershipTransfer(_lodgingFacilityId, lodgingFacilities[_lodgingFacilityId].owner, _newOwner);\n    lodgingFacilities[_lodgingFacilityId].owner = _newOwner;\n  }\n\n  function deleteLodgingFacility(bytes32 _lodgingFacilityId) public override onlyLodgingFacilityOwner(_lodgingFacilityId) {\n    lodgingFacilities[_lodgingFacilityId].exists = false;\n    emit LodgingFacilityRemoved(_lodgingFacilityId);\n  }\n\n  /*\n   * Spaces\n   */\n  function addSpace(\n    bytes32 _lodgingFacilityId,\n    uint16 _capacity,\n    uint64 _pricePerNightWei,\n    bool _active,\n    string calldata _dataURI\n  ) public {\n    bytes32 _i = _lodgingFacilityId;\n\n    _facilityShouldExist(_i);\n    _shouldOnlyBeCalledByOwner(_i, \"Only facility owner may add Spaces\");\n    _dataUriMustBeProvided(_dataURI);\n\n    bytes32 _id = keccak256(abi.encodePacked(\n      _i,\n      _dataURI\n    ));\n\n    require(!spaces[_id].exists, \"Space already exists\");\n\n    spaces[_id] = Space(\n      _i,\n      _capacity,\n      _pricePerNightWei,\n      _active,\n      true,\n      _dataURI\n    );\n    _spaceIdsByFacilityId[_i].push(_id);\n\n    emit SpaceAdded(_i, _capacity, _pricePerNightWei, _active, _dataURI);\n  }\n\n  function updateSpace(\n    uint256 _spaceIndex,\n    uint16 _capacity,\n    uint64 _pricePerNightWei,\n    bool _active,\n    string calldata _dataURI\n  ) public {\n    // TODO\n  }\n\n  /**\n   * Stay escrow\n   */\n\n  function deposit(\n    address payee,\n    bytes32 spaceId\n  ) public payable override(StayEscrow) {\n    super.deposit(payee, spaceId);\n  }\n\n  // Complete withdraw. Allowed in Checkout deposit state only\n  function withdraw(\n    address payable payee,\n    bytes32 _spaceId\n  )\n    internal override(StayEscrow)\n  {\n    super.withdraw(payee, _spaceId);\n  }\n\n  // Partial withdraw\n  function withdraw(\n    address payable payee,\n    uint256 payment,\n    bytes32 _spaceId\n  ) internal override(StayEscrow) {\n    // partial withdraw condition\n    require(\n      payment <= spaces[_spaceId].pricePerNightWei,\n      \"Withdraw amount not allows in this state\"\n    );\n    super.withdraw(payee, payment, _spaceId);\n  }\n\n  /**\n   * Glider\n   */\n  // Book a new stay in a space\n  function newStay(\n    bytes32 _spaceId,\n    uint16 _startDay,\n    uint16 _numberOfDays,\n    uint16 _quantity\n  ) public payable override returns (uint256) {\n    _checkBookingParams(_spaceId, _startDay, _numberOfDays);\n\n    Space storage _s = spaces[_spaceId];\n    uint256 _stayPrice = _numberOfDays * _quantity * _s.pricePerNightWei;\n\n    require(msg.value >= _stayPrice, \"Need. More. Money!\");\n\n    for (uint16 _x = 0; _x < _numberOfDays; _x++) {\n      require(\n        _s.capacity - _booked[_spaceId][_startDay+_x] >= _quantity,\n        \"Insufficient inventory\"\n      );\n      _booked[_spaceId][_startDay+_x] += _quantity;\n    }\n\n    deposit(_msgSender(), _spaceId);\n\n    _stayTokenIds.increment();\n    uint256 _newStayTokenId = _stayTokenIds.current();\n    _safeMint(_msgSender(), _newStayTokenId);\n\n    // Inline tokenURI (data:application/json;base64)\n    string memory _tokenURI = StayTokenMeta.createTokenUri(\n      _newStayTokenId,\n      _s.lodgingFacilityId,\n      _spaceId,\n      _startDay,\n      _numberOfDays,\n      _quantity\n    );\n    _setTokenURI(_newStayTokenId, _tokenURI);\n\n    _stays[_newStayTokenId] = Stay(\n      _spaceId,\n      _startDay,\n      _numberOfDays,\n      _quantity,\n      false,\n      false\n    );\n\n    // @todo: escrow\n    // facility owner should be able to claim 1-night amount during check-in\n    // then, facility owner should be able to claim full amount on check-out day\n\n    // @todo LIF/WIN\n    // @todo LodgingFacility loyalty token\n    // @todo divert all the excess WEI to Ukraine DAO\n    // @todo Receive Ukraine Supporter NFT\n\n    emit NewStay(_spaceId, _newStayTokenId);\n\n    return _newStayTokenId;\n  }\n\n  /**\n   * CheckIn\n   */\n\n  // Stay checkIn; can be called by a stay token owner\n  function checkIn(uint256 _tokenId) public override onlyTokenOwner(_tokenId) {\n    Stay storage _stay = _stays[_tokenId];\n    require(!_stay.checkIn, \"Already checked in\");\n    bytes32 _spaceId = _stay.spaceId;\n    uint256 firstNight = spaces[_spaceId].pricePerNightWei;\n    // Partial withdraw, just for a first night\n    _stay.checkIn = true;\n    withdraw(\n      payable(lodgingFacilities[spaces[_spaceId].lodgingFacilityId].owner),\n      firstNight,\n      _spaceId\n    );\n    emit CheckIn(_tokenId);\n  }\n\n  /**\n   * CheckOut\n   */\n\n  function checkOut(uint256 _tokenId) public virtual override {\n    Stay storage _stay = _stays[_tokenId];\n    require(!_stay.checkOut, \"Already checked out\");\n    bytes32 _spaceId = _stay.spaceId;\n    address spaceOwner = lodgingFacilities[spaces[_spaceId].lodgingFacilityId].owner;\n    require(\n      _msgSender() == spaceOwner,\n      \"Only space owner is allowed\"\n    );\n    // CheckOut condition by time\n    require(\n      dayZero + (_stay.startDay + _stay.numberOfDays) * 86400 >= block.timestamp,\n      \"Forbidden unless checkout date\"\n    );\n    // Complete withdraw (rest of deposit)\n    _stay.checkOut = true;\n    withdraw(\n      payable(spaceOwner),\n      _spaceId\n    );\n    emit CheckOut(_tokenId);\n  }\n\n  /*\n   * Helpers\n   */\n\n  function _facilityShouldExist(bytes32 _i) internal view {\n    require(lodgingFacilities[_i].exists, \"Facility does not exist\");\n  }\n\n  function _spaceShouldExist(bytes32 _i) internal view {\n    require(spaces[_i].exists, \"Space does not exist\");\n  }\n\n  function _shouldOnlyBeCalledByOwner(bytes32 _i, string memory _message) internal view {\n    require(lodgingFacilities[_i].owner == _msgSender(), _message);\n  }\n\n  function _dataUriMustBeProvided(string memory _uri) internal pure {\n    require(bytes(_uri).length > 0, \"Data URI must be provided\");\n  }\n\n  function _checkBookingParams(bytes32 _spaceId, uint256 _startDay, uint16 _numberOfDays) internal view {\n    require(dayZero + _startDay * 86400 > block.timestamp - 86400 * 2, \"Don't stay in the past\"); // @todo this could be delegated to frontend\n    require(lodgingFacilities[spaces[_spaceId].lodgingFacilityId].active, \"Lodging Facility is inactive\");\n    require(spaces[_spaceId].active, \"Space is inactive\");\n    require(_numberOfDays > 0, \"Number of days should be 1 or more\");\n  }\n\n  function _getActiveLodgingFacilitiesCount() internal view returns (uint256 count) {\n    for (uint256 i = 0; i < _lodgingFacilityIds.length; i++) {\n      if (lodgingFacilities[_lodgingFacilityIds[i]].active) {\n        count++;\n      }\n    }\n  }\n\n  function _getActiveSpacesCount(bytes32 _lodgingFacilityId) internal view returns (uint256 count) {\n    bytes32[] storage facilitiesSpaces = _spaceIdsByFacilityId[_lodgingFacilityId];\n\n    for (uint256 i = 0; i < facilitiesSpaces.length; i++) {\n      if (spaces[facilitiesSpaces[i]].active) {\n        count++;\n      }\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/IEthRioStays.sol": {
      "content": "// SPDX-License-Identifier: GPL\npragma solidity ^0.8.0;\n\n\nabstract contract IEthRioStays {\n\n  // Events\n  event LodgingFacilityCreated(bytes32 facilityId, address indexed owner, string dataURI);\n  event LodgingFacilityUpdated(bytes32 facilityId, string dataURI);\n  event LodgingFacilityActiveState(bytes32 facilityId, bool active);\n  event LodgingFacilityOwnershipTransfer(bytes32 facilityId, address indexed prevOwner, address indexed newOwner);\n  event LodgingFacilityRemoved(bytes32 facilityId);\n  event SpaceAdded(bytes32 facilityId, uint64 capacity, uint64 pricePerNightWei, bool active, string dataURI);\n  event SpaceUpdated(bytes32 facilityId, uint256 index, uint64 capacity, uint64 pricePerNightWei, bool active, string dataURI);\n  event NewStay(bytes32 spaceId, uint256 tokenId);\n  event CheckIn(uint256 tokenId);\n  event CheckOut(uint256 tokenId);\n\n  // To display all availability in Glider: getActiveLodgingFacilityIds, getSpaceIdsByFacilityId, getAvailability\n  function getAllLodgingFacilityIds() public view virtual returns (bytes32[] memory);\n  function getActiveLodgingFacilityIds() public view virtual returns (bytes32[] memory);\n  function getSpaceIdsByFacilityId(bytes32 _lodgingFacilityId) public virtual returns (bytes32[] memory);\n  function getActiveSpaceIdsByFacilityId(bytes32 _lodgingFacilityId) public virtual returns (bytes32[] memory);\n  function getAvailability(bytes32 _spaceId, uint16 _startDay, uint16 _numberOfDays) public view virtual returns (uint16[] memory);\n\n  // For the lodging facility owner, to display their facilities\n  function getLodgingFacilityIdsByOwner(address _owner) public virtual returns (bytes32[] memory);\n\n  // Facility and spaces details\n  function getLodgingFacilityById(bytes32 _lodgingFacilityId) public view virtual returns(\n    bool exists,\n    address owner,\n    bool active,\n    string memory dataURI\n  );\n  function getSpaceById(bytes32 _spaceId) public view virtual returns (\n    bool exists,\n    bytes32 lodgingFacilityId,\n    uint16 capacity,\n    uint256 pricePerNightWei,\n    bool active,\n    string memory dataURI\n  );\n\n  // Facility management\n  function registerLodgingFacility(string calldata _dataURI, bool _active, address _fren) public virtual;\n  function registerLodgingFacility(string calldata _dataURI, bool _active) public virtual;\n  function updateLodgingFacility(bytes32 _lodgingFacilityId, string calldata _newDataURI) public virtual;\n  function activateLodgingFacility(bytes32 _lodgingFacilityId) public virtual;\n  function deactivateLodgingFacility(bytes32 _lodgingFacilityId) public virtual;\n  function yieldLodgingFacility(bytes32 _lodgingFacilityId, address _newOwner) public virtual;\n  function deleteLodgingFacility(bytes32 _lodgingFacilityId) public virtual;\n\n  // Delegates (addresses that can perform certain actions, like check-in and check-out)\n  // function addDelegate(bytes32 _lodgingFacilityId, address _delegate, uint8 _accessLevel) public virtual;\n  // function changeDelegateAccessLevel(bytes32 _lodgingFacilityId, address _delegate, uint8 _accessLevel) public virtual;\n  // function removeDelegate(bytes32 _lodgingFacilityId, address _delegate) public virtual;\n\n  // Escrow\n  // function getEscrowAmountForMyFacilities() public view virtual returns (uint256);\n  // function getFacilityEscrowAmount(bytes32 _lodgingFacilityId) public view virtual returns (uint256);\n  // function getClaimableAmountForMyFacilities() public view virtual returns (uint256);\n  // function getClaimableFacilityAmount(bytes32 _lodgingFacilityId) public view virtual returns (uint256);\n  // function claimAllFromEscrow() public virtual;\n\n  // Stays\n  function newStay(bytes32 _spaceId, uint16 _startDay, uint16 _numberOfDays, uint16 _quantity) public payable virtual returns (uint256);\n  // getting all my Stays is via built-in NFT contract getter\n  // getting Stay details is via NFT's tokenURI getter\n  // function getAllStayIdsByFacilityId(bytes32 _lodgingFacilityId) public virtual returns (uint256[] memory);\n  // function getCurrentStayIdsByFacilityId(bytes32 _lodgingFacilityId) public virtual returns (uint256[] memory);\n  // function getFutureStayIdsByFacilityId(bytes32 _lodgingFacilityId) public virtual returns (uint256[] memory);\n  function checkIn(uint256 _tokenId) public virtual;\n  function checkOut(uint256 _tokenId) public virtual;\n\n  // function requestChange(uint256 _tokenId, bytes32 _spaceId, uint16 _startDay, uint16 _numberOfDays, uint16 _quantity) public payable virtual;\n  // function requestCancel(int256 _tokenId) public virtual;\n  // function requestResponse(uint256 _tokenId, bool _answer) public virtual;\n  // @todo: change my contact information\n\n  // Reviews\n  // @todo: leave a LF review\n  // @todo: leave a Guest review\n  // @todo: answer a review\n  // @todo: start a dispute on a review\n}"
    },
    "contracts/StayEscrow.sol": {
      "content": "// SPDX-License-Identifier: GPL\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n\nabstract contract StayEscrow {\n  using Address for address payable;\n\n  enum State {\n    Checkin,\n    Checkout\n  }\n\n  event Deposited(address indexed payee, uint256 weiAmount, bytes32 spaceId);\n  event Withdrawn(address indexed payee, uint256 weiAmount, bytes32 spaceId);\n\n  // spaceId => payee address => deposit uint256\n  mapping(bytes32 => mapping (address => uint256)) private _deposits;\n  mapping(bytes32 => mapping (address => State)) private _states;\n\n  function depositsOf(address payee, bytes32 spaceId) public view returns (uint256) {\n    return _deposits[spaceId][payee];\n  }\n\n  function depositsState(address payee, bytes32 spaceId) public view returns (State) {\n    return _states[spaceId][payee];\n  }\n\n  function deposit(address payee, bytes32 spaceId) public payable virtual {\n    uint256 amount = msg.value;\n    _deposits[spaceId][payee] += amount;\n    _states[spaceId][payee] = State.Checkin;\n    emit Deposited(payee, amount, spaceId);\n  }\n\n  // Complete withdraw  - state \"Checkout\" only\n  function withdraw(address payable payee, bytes32 spaceId) internal virtual {\n    uint256 payment = _deposits[spaceId][payee];\n    require(payment > 0, \"Insufficient funds\");\n    require(\n      _states[spaceId][payee] == State.Checkout,\n      \"Complete withdraw not allowed in this state\"\n    );\n    _deposits[spaceId][payee] = 0;\n    payee.sendValue(payment);\n    emit Withdrawn(payee, payment, spaceId);\n  }\n\n  // Partial withdraw - state \"Checkin\"\n  function withdraw(\n    address payable payee,\n    uint256 payment,\n    bytes32 spaceId\n  ) internal virtual {\n    require(payment >= _deposits[spaceId][payee], \"Insufficient funds\");\n    _deposits[spaceId][payee] = _deposits[spaceId][payee] - payment;\n    _states[spaceId][payee] = State.Checkout;\n    payee.sendValue(payment);\n    emit Withdrawn(payee, payment, spaceId);\n  }\n}"
    },
    "contracts/libraries/StayTokenMeta.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\n\nlibrary StayTokenMeta {\n\n  function createTokenUri(\n    uint256 tokenId,\n    bytes32 facilityId,\n    bytes32 spaceId,\n    uint16 startDay,\n    uint16 numberOfDays,\n    uint16 quantity\n  ) internal pure returns (string memory) {\n    string memory json = Base64.encode(\n      bytes(\n        string(\n          abi.encodePacked(\n            '{\"name\": \"EthRioStays #',\n            uintToString(tokenId),\n            '\", \"description\": \"Stay at lodging facility\",',\n            '\"attributes\":[{\"trait_type\":\"facilityId\",\"value\":\"',\n            toHex(facilityId),\n            '\"},{\"trait_type\":\"spaceId\",\"value\":\"',\n            toHex(spaceId),\n            '\"},{\"trait_type\": \"startDay\",\"value\":\"',\n            uintToString(startDay),\n            '\"},{\"trait_type\": \"numberOfDays\",\"value\":\"',\n            uintToString(numberOfDays),\n            '\"},{\"trait_type\": \"quantity\",\"value\":\"',\n            uintToString(quantity),\n            '\"}]}'\n          )\n        )\n      )\n    );\n\n    return string(abi.encodePacked('data:application/json;base64,', json));\n  }\n\n  function uintToString(uint256 value) internal pure returns (string memory) {\n    // Inspired by OraclizeAPI's implementation - MIT license\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n    if (value == 0) {\n      return \"0\";\n    }\n    uint256 temp = value;\n    uint256 digits;\n    while (temp != 0) {\n      digits++;\n      temp /= 10;\n    }\n    bytes memory buffer = new bytes(digits);\n    while (value != 0) {\n      digits -= 1;\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n      value /= 10;\n    }\n    return string(buffer);\n  }\n\n  function toHex16 (bytes16 data) internal pure returns (bytes32 result) {\n    result = bytes32 (data) & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000 |\n      (bytes32 (data) & 0x0000000000000000FFFFFFFFFFFFFFFF00000000000000000000000000000000) >> 64;\n    result = result & 0xFFFFFFFF000000000000000000000000FFFFFFFF000000000000000000000000 |\n      (result & 0x00000000FFFFFFFF000000000000000000000000FFFFFFFF0000000000000000) >> 32;\n    result = result & 0xFFFF000000000000FFFF000000000000FFFF000000000000FFFF000000000000 |\n      (result & 0x0000FFFF000000000000FFFF000000000000FFFF000000000000FFFF00000000) >> 16;\n    result = result & 0xFF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000 |\n      (result & 0x00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000) >> 8;\n    result = (result & 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000) >> 4 |\n      (result & 0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00) >> 8;\n    result = bytes32 (0x3030303030303030303030303030303030303030303030303030303030303030 +\n      uint256 (result) +\n      (uint256 (result) + 0x0606060606060606060606060606060606060606060606060606060606060606 >> 4 &\n      0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F) * 7);\n  }\n\n  function toHex(bytes32 data) internal pure returns (string memory) {\n    return string(\n      abi.encodePacked(\n        \"0x\",\n        toHex16(bytes16(data)), toHex16(bytes16 (data << 128))\n      )\n    );\n  }\n}"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}